version: 2.1

executors:
  default:
    docker:
      - image: circleci/node:16.11.1
    working_directory: ~/ci-coverage-notification
    environment:
      - BASH_ENV: /home/circleci/.bashrc


jobs:
  initialization:
    executor:
      name: default
    steps:
      - checkout
      - restore_cache:
          keys:
            - node_modules-{{ checksum "yarn.lock" }}
            - node_modules-
      - run: yarn --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: node_modules-{{ checksum "yarn.lock" }}
      - persist_to_workspace:
          root: .
          paths:
            - .

  create_token:
    working_directory: ~/ci-coverage-notification
    executor:
      name: default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Create Token
          command: |
            header=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 -w 0)
            now=$(date "+%s")
            iat=$((${now} - 60))
            exp=$((${now} + (10 * 60)))
            github_app_id="${APPS_ID}"
            payload=$(echo -n "{\"iat\":${iat},\"exp\":${exp},\"iss\":${github_app_id}}" | base64 -w 0)
            echo $APPS_PRIVATE_KEY | base64 --decode > ./githubapps
            unsigned_token="${header}.${payload}"
            signed_token=$(echo -n $(echo -n "${unsigned_token}" | openssl dgst -binary -sha256 -sign "./githubapps" | base64))
            rm ./githubapps
            jwt="${unsigned_token}.${signed_token}"
            echo ${jwt}
            user_name="disneyLadySango" # githubアカウント
            installation_id=$(
              curl -s -X GET \
                -H "Authorization: Bearer ${jwt}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/app/installations" \
              | jq -r ".[] | select(.account.login == \"${user_name}\" and .account.type == \"User\") | .id"
            )
            echo $installation_id
            echo $(
              curl -s -X POST \
                -H "Authorization: Bearer ${jwt}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/app/installations/${installation_id}/access_tokens" \
              | jq -r ".token"
            ) > ./githubapps_token
            cat ./githubapps_token
      # - store_artifacts:
      #     path: ~/ci-coverage-notification/githubapps_token
      #     destination: githubapps_token
      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    working_directory: ~/ci-coverage-notification
    executor:
      name: default
    steps:
      - attach_workspace:
          at: .
      # mainのCoverageを復旧する
      - restore_cache:
          keys: 
            - coverage-base-
            - coverage-base
      - run: 
          name: Run Test
          command: |
            yarn test:coverage --ci --runInBand
      - run:
          name: Rename Coverage Directory By Main Branch
          command: |
            if [ ${CIRCLE_BRANCH} == "main" ]; then
              mv ./coverage ./coverage-base
            fi
      # 保存はするがmainのみを使うので実質使ってない
      - save_cache:
          paths:
            - ~/ci-coverage-notification/coverage-base
          key: coverage-base-{{ checksum "./coverage-base/coverage-summary.json" }}
      - run:
          name: Coverage Parse & Post Pull Request
          command: |
            if [ ${CIRCLE_BRANCH} == "main" ]; then
              echo NO REPORT MAIN
            else
              sudo apt-get update && sudo apt-get install -y jq --no-install-recommends
              BRANCH_NAME=$(echo ${CIRCLE_BRANCH} | sed -e "s/\//_/")
              CURRENT_JSON=$(cat ./coverage/coverage-summary.json)
              CUR_STMT=$(echo $CURRENT_JSON | jq '.total.statements.pct')
              CUR_BRANCH=$(echo $CURRENT_JSON | jq '.total.branches.pct')
              CUR_FUNCS=$(echo $CURRENT_JSON | jq '.total.functions.pct')
              CUR_LINES=$(echo $CURRENT_JSON | jq '.total.lines.pct')

              MAIN_JSON=$(cat ./coverage-base/coverage-summary.json)
              MAIN_STMT=$(echo $MAIN_JSON | jq '.total.statements.pct')
              MAIN_BRANCH=$(echo $MAIN_JSON | jq '.total.branches.pct')
              MAIN_FUNCS=$(echo $MAIN_JSON | jq '.total.functions.pct')
              MAIN_LINES=$(echo $MAIN_JSON | jq '.total.lines.pct')

              echo '=========================================================='
              echo '         | Stmts | Branch | Funcs | Lines | '
              echo '=========================================================='
              echo " main    | $MAIN_STMT | $MAIN_BRANCH | $MAIN_FUNCS | $MAIN_LINES "
              echo '=========================================================='
              echo " current | $CUR_STMT | $CUR_BRANCH | $CUR_FUNCS | $CUR_LINES "
              echo '=========================================================='
              echo "https://api.github.com/repos/disneyLadySango/${CIRCLE_PROJECT_REPONAME}/issues/${CIRCLE_PULL_REQUEST##*/}/comments"
              if [ ${CI_PULL_REQUEST} ]; then
                GITHUB_APPS_TOKEN=$(cat ./githubapps_token)
                coverage_report=$(echo "
                  ## Coverage Report  
                  <br />
                  <br />
                  |      | Stmts | Branch | Funcs | Lines |
                  | ---- | ----- | ------ | ----- | ----- |
                  | main | $MAIN_STMT | $MAIN_BRANCH | $MAIN_FUNCS | $MAIN_LINES |
                  | current | $CUR_STMT | $CUR_BRANCH | $CUR_FUNCS | $CUR_LINES |
                ")
                echo $coverage_report
                curl -X POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${GITHUB_APPS_TOKEN}"\
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  -d "{\"body\":\"${coverage_report}\"}" \
                  "https://api.github.com/repos/disneyLadySango/${CIRCLE_PROJECT_REPONAME}/issues/${CIRCLE_PULL_REQUEST##*/}/comments"
              fi
            fi
      # - store_artifacts:
      #     path: ~/ci-coverage-notification/coverage
      #     destination: coverage

workflows:
  version: 2
  workflow:
    jobs:
      - initialization
      - create_token:
          requires:
            - initialization
      - test:
          requires:
            - initialization
            - create_token
